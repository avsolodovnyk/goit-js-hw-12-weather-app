{"version":3,"sources":["webpack:///./scripts/fetchWeather.js","webpack:///./scripts/getGeoPosition.js","webpack:///./scripts/updateWeatherFace.js","webpack:///./scripts/mainModel.js"],"names":["fetchWeather","query","Promise","resolve","reject","fetch","then","response","ok","json","Error","status","options","refs","secWeather","document","querySelector","spinner","updateWeatherFace","data","weatherMarkup","current","condition","icon","text","location","name","temp_c","humidity","wind_kph","innerHTML","insertAdjacentHTML","spinnerWheatherShowSwitcher","notifyOnError","errorCode","PNotify","error","title","weather","classList","remove","add","subbmitBtn","addEventListener","e","preventDefault","currentTarget","elements","value","curWheatherData","err","message","timeout","maximumAge","window","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","dataString","code"],"mappings":"iKACe,SAASA,EAAaC,GACnC,OAAO,IAAIC,QAAQ,SAACC,EAASC,GACJC,MAAK,8EACoDJ,EADpD,YAGzBK,KAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAElB,MAAM,IAAIC,MAAMH,EAASI,UAE1BL,KAAKH,GATe,MAUdC,mBCXLQ,cCGFC,uBAAO,CACXC,WAAYC,SAASC,cAAc,YACnCC,QAASF,SAASC,cAAc,cAE3B,SAASE,EAAkBC,GAChC,IAAMC,EAAa,wEAGFD,EAAKE,QAAQC,UAAUC,KAHrB,eAIVJ,EAAKE,QAAQC,UAAUE,KAJb,uDAMwBL,EAAKM,SAASC,KANtC,0DAQjBP,EAAKE,QAAQM,OARI,kEAUwBR,EAAKE,QAAQO,SAVrC,oDAWgBT,EAAKE,QAAQQ,SAX7B,kEAajBV,EAAKE,QAAQC,UAAUE,KAbN,0BAgBnBX,EAAKC,WAAWgB,UAAY,GAC5BjB,EAAKC,WAAWiB,mBAAmB,aAAcX,GACjDY,GAA4B,GAAO,GAE9B,SAASC,EAAcC,GAC5B,IAAIV,EAAO,GAETA,EADe,GAAbU,EACK,mEACe,KAAbA,EACF,4BAEA,qBAETC,IAAQC,MAAM,CACZC,MAAO,SACPb,KAAMA,IAGH,SAASQ,EAA4Bf,EAASqB,GAC/CrB,EACFJ,EAAKI,QAAQsB,UAAUC,OAAO,aAE9B3B,EAAKI,QAAQsB,UAAUE,IAAI,aAEzBH,EACFzB,EAAKC,WAAWyB,UAAUC,OAAO,aAEjC3B,EAAKC,WAAWyB,UAAUE,IAAI,cC/CrB,CAAEC,WAAY3B,SAASC,cAAc,kBAC7C0B,WAAWC,iBAAiB,SAqBjC,SAA0BC,GACxBA,EAAEC,iBACFb,GAA4B,GAAM,GAElChC,EADoB4C,EAAEE,cAAcC,SAAS,GAAGC,OAE7C1C,KAAK,SAAA2C,GAAe,OAAI/B,EAAkB+B,KAD7C,MAES,SAAAC,GACLlB,GAA4B,GAAO,GACnCC,EAAciB,EAAIC,aAoBxBnB,GAA4B,GAAM,IFtD1BpB,EAAU,CAAEwC,QAAS,IAAMC,WAAY,MACtC,IAAInD,QAAQ,SAACC,EAASC,GAC3BkD,OAAOC,UAAUC,YAAYC,mBAAmBtD,EAASC,EAAQQ,MEsDlEN,KAAK,SAAAmB,GAAQ,OAAOA,EAASiC,OAAOC,SAAvB,KAAoClC,EAASiC,OAAOE,YACjEtD,KAAK,SAAAuD,GAAU,OAAI7D,EAAa6D,KAChCvD,KAAK,SAAAa,GAAI,OAAID,EAAkBC,KAHlC,MAIS,SAAA+B,GACLlB,GAA4B,GAAO,GACnCC,EAAciB,EAAIY","file":"main.328ffa5584c4e99998ee.js","sourcesContent":["'use strict';\r\nexport default function fetchWeather(query) {\r\n  return new Promise((resolve, reject) => {\r\n    const currentWeather = fetch(\r\n      `http://api.apixu.com/v1/current.json?key=a111d758e3d74685acc181313191107&q=${query}&lang=ru`,\r\n    )\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        throw new Error(response.status);\r\n      })\r\n      .then(resolve)\r\n      .catch(reject);\r\n  });\r\n}\r\n","'use strict';\r\nexport default function getGeoPosition() {\r\n  const options = { timeout: 5000, maximumAge: 1800000 };\r\n  return new Promise((resolve, reject) => {\r\n    window.navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n  });\r\n}\r\n","'use strict';\r\nimport PNotify from 'pnotify/dist/es/PNotify';\r\nimport PNotifyButtons from 'pnotify/dist/es/PNotifyButtons';\r\nimport '../../node_modules/basiclightbox/dist/basicLightbox.min';\r\n\r\nconst refs = {\r\n  secWeather: document.querySelector('#weather'),\r\n  spinner: document.querySelector('.loading'),\r\n};\r\nexport function updateWeatherFace(data) {\r\n  const weatherMarkup = `<h2>Current weather</h2>\r\n  <img\r\n    class=\"icon\"\r\n    src=\"https://${data.current.condition.icon}\"\r\n    alt=\"${data.current.condition.text}\"\r\n  />\r\n  <p>Location: <span data-field=\"location\">${data.location.name}</span></p>\r\n  <p>Temperature: <span data-field=\"temp\">${\r\n    data.current.temp_c\r\n  }&#8451;</span></p>\r\n  <p>Humidity: <span data-field=\"humidity\">${data.current.humidity}%</span></p>\r\n  <p>Wind: <span data-field=\"wind\">${data.current.wind_kph}kph</span></p>\r\n  <p>Conditions: <span data-field=\"conditions\">${\r\n    data.current.condition.text\r\n  }</span></p>\r\n</section>`;\r\n  refs.secWeather.innerHTML = '';\r\n  refs.secWeather.insertAdjacentHTML('afterbegin', weatherMarkup);\r\n  spinnerWheatherShowSwitcher(false, true);\r\n}\r\nexport function notifyOnError(errorCode) {\r\n  let text = '';\r\n  if (errorCode == 1) {\r\n    text = 'Нет прав доступа к геопозиции, используйте поиск по имени города';\r\n  } else if (errorCode == 400) {\r\n    text = 'Указанный город не найден';\r\n  } else {\r\n    text = 'Неизвестная ошибка';\r\n  }\r\n  PNotify.error({\r\n    title: 'Ошибка',\r\n    text: text,\r\n  });\r\n}\r\nexport function spinnerWheatherShowSwitcher(spinner, weather) {\r\n  if (spinner) {\r\n    refs.spinner.classList.remove('is-hidden');\r\n  } else {\r\n    refs.spinner.classList.add('is-hidden');\r\n  }\r\n  if (weather) {\r\n    refs.secWeather.classList.remove('is-hidden');\r\n  } else {\r\n    refs.secWeather.classList.add('is-hidden');\r\n  }\r\n}\r\n","'use strict';\r\nimport fetchWeather from './fetchWeather';\r\nimport getGeoPosition from './getGeoPosition';\r\nimport { updateWeatherFace } from './updateWeatherFace';\r\nimport { notifyOnError } from './updateWeatherFace';\r\nimport { spinnerWheatherShowSwitcher } from './updateWeatherFace';\r\nconst refs = { subbmitBtn: document.querySelector('#search-form') };\r\nrefs.subbmitBtn.addEventListener('submit', handleCitySubmit);\r\n{\r\n  // function handleCitySubmit(e) {\r\n  //   e.preventDefault();\r\n  //   spinnerWheatherShowSwitcher(true, false);\r\n  //   const enteredCity = e.currentTarget.elements[0].value;\r\n  //   const getWheaterByEnteredCity = async enteredCity => {\r\n  //     try {\r\n  //       spinnerWheatherShowSwitcher(true, false);\r\n  //       const res = await fetchWeather(enteredCity);\r\n  //       return res;\r\n  //     } catch (err) {\r\n  //       spinnerWheatherShowSwitcher(false, false);\r\n  //       throw err.message;\r\n  //     }\r\n  //   };\r\n  //   getWheaterByEnteredCity(enteredCity)\r\n  //     .then(curWheatherData => updateWeatherFace(curWheatherData))\r\n  //     .catch(err => notifyOnError(err));\r\n  // }\r\n}\r\nfunction handleCitySubmit(e) {\r\n  e.preventDefault();\r\n  spinnerWheatherShowSwitcher(true, false);\r\n  const enteredCity = e.currentTarget.elements[0].value;\r\n  fetchWeather(enteredCity)\r\n    .then(curWheatherData => updateWeatherFace(curWheatherData))\r\n    .catch(err => {\r\n      spinnerWheatherShowSwitcher(false, false);\r\n      notifyOnError(err.message);\r\n    });\r\n}\r\n{\r\n  // const getWeatherGeoByGeoAPI = async () => {\r\n  //   try {\r\n  //     spinnerWheatherShowSwitcher(true, false);\r\n  //     const res = await getGeoPosition();\r\n  //     return res.coords;\r\n  //   } catch (err) {\r\n  //     spinnerWheatherShowSwitcher(false, false);\r\n  //     throw err;\r\n  //   }\r\n  // };\r\n  // getWeatherGeoByGeoAPI()\r\n  //   .then(location => `${location.latitude}+ ${location.longitude}`)\r\n  //   .then(dataString => fetchWeather(dataString))\r\n  //   .then(data => updateWeatherFace(data))\r\n  //   .catch(err => notifyOnError(err.code));\r\n}\r\nspinnerWheatherShowSwitcher(true, false);\r\ngetGeoPosition()\r\n  .then(location => `${location.coords.latitude}+ ${location.coords.longitude}`)\r\n  .then(dataString => fetchWeather(dataString))\r\n  .then(data => updateWeatherFace(data))\r\n  .catch(err => {\r\n    spinnerWheatherShowSwitcher(false, false);\r\n    notifyOnError(err.code);\r\n  });\r\n"],"sourceRoot":""}